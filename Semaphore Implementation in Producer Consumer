#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5
//#define NUM_ITEMS 8
int NUM_ITEMS;
int buffer[BUFFER_SIZE];
int in = 0, out = 0;

sem_t empty;
sem_t full;
pthread_mutex_t mutex;

void *producer(void *arg)
{
   for(int i = 0; i < NUM_ITEMS; i++)
   {
      int item = rand() % 100;
      sem_wait(&empty);
      pthread_mutex_lock(&mutex);
      buffer[in] = item;
      printf("Producer produced: %d\n\n", item);
      in = (in + 1) % BUFFER_SIZE;
      pthread_mutex_unlock(&mutex);
      sem_post(&full);
      sleep(1);
   }
   return NULL;
}

void *consumer(void *arg)
{
   for(int i = 0; i < NUM_ITEMS; i++)
   {
      sem_wait(&full);
      pthread_mutex_lock(&mutex);
      int item = buffer[out];
      printf("Consumer consumed: %d\n\n", item);
      out = (out + 1) % BUFFER_SIZE;
      pthread_mutex_unlock(&mutex);
      sem_post(&empty);
      sleep(2);
   }
   return NULL;
}
int main()
{
   printf("Enter the no.of items to be produced:");
   scanf("%d",&NUM_ITEMS);
   pthread_t pro, con;
   sem_init(&empty, 0, BUFFER_SIZE);
   sem_init(&full, 0, 0);
   pthread_mutex_init(&mutex, NULL);
   pthread_create(&pro, NULL, producer, NULL);
   pthread_create(&con, NULL, consumer, NULL);
   pthread_join(pro, NULL);
   pthread_join(con, NULL);
   sem_destroy(&empty);
   sem_destroy(&full);
   pthread_mutex_destroy(&mutex);
   return 0;
}
