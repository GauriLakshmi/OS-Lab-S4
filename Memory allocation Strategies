#include<stdio.h>

int m,n;
int part[10];
int prosize[10];
int flag[10];
int allocated[10];

void FirstFit()
{
   int i,j,k,External=0;
   for(i=0;i<m;i++)
   {
      flag[i]=0;
   }
   for(i=0;i<n;i++)
   {
      allocated[i]=0;
   }
   printf("\nFirst Fit\n");
   for(i=0;i<n;i++)
   {
      for(j=0;j<m;j++)
      {
         if(flag[j]!=1&&allocated[i]!=1)
         {
            if(part[j]>=prosize[i])
            {
               flag[j]=1;
               allocated[i]=1;
               printf("\n%d is allocted to [%d] th block\n",prosize[i],part[j]);
               printf("Internal Fragmentation = [%d]\n",part[j]-prosize[i]);
               break;
            }
         }
      }
   }
   for(j=0;j<n;j++)
   {
      if(allocated[j]!=1)
      {
         printf("\nProcess of size %d cannot be allocated\n",prosize[j]);
      }
   }
   for(j=0;j<m;j++)
   {
      if(flag[j]==0)
      {
         External=External+part[j];
      }
   }
   printf("\nExternal Fragmentation :-\n");
   printf("%d\n",External);
}

void BestFit()
{
   int i,j,k,temp,External=0;
   for(i=0;i<m;i++)
   {
      flag[i]=0;
   }
   for(i=0;i<n;i++)
   {
      allocated[i]=0;
   }
   for(i=0;i<m-1;i++)
   {
      for(j=0;j<m-i-1;j++)
      {
         if(part[j]>part[j+1])
         {
            temp=part[j];
            part[j]=part[j+1];
            part[j+1]=temp;
         }
      }
   }
   printf("Best Fit\n");
   for(i=0;i<n;i++)
   {
      for(j=0;j<m;j++)
      {
         if(flag[j]!=1&&allocated[i]!=1)
         {
            if(part[j]>=prosize[i])
            {
               flag[j]=1;
               allocated[i]=1;
               printf("\n%d is allocted to [%d] th block\n",prosize[i],part[j]);
               printf("Internal Fragmentation = [%d]\n",part[j]-prosize[i]);
               break;
            }
         }
      }
   }
   for(j=0;j<n;j++)
   {
      if(allocated[j]!=1)
      {
         printf("Process of size [%d] cannot be allocated\n",prosize[j]);
      }
   }
   for(j=0;j<m;j++)
   {
      if(flag[j]==0)
      {
          External = External+part[j];
      }
   }
   printf("\nExternal Fragmentation :- ");
   printf("%d\n",External);
}

void  WorstFit()
{
   int i,j,k,temp,External=0;
   for(i=0;i<m;i++)
   {
      flag[i]=0;
   }
   for(i=0;i<n;i++)
   {
      allocated[i]=0;
   }
   for(i=0;i<m-1;i++)
   {
      for(j=0;j<m-i-1;j++)
      {
         if(part[j]<part[j+1])
         {
             temp=part[j];
             part[j]=part[j+1];
             part[j+1]=temp;
         }
      }
   }
   printf("\nWorst Fit\n");
   for(i=0;i<n;i++)
   {
      for(j=0;j<m;j++)
      {
         if(flag[j]!=1&&allocated[i]!=1)
         {
            if(part[j]>=prosize[i])
            {
               flag[j]=1;
               allocated[i]=1;
               printf("\n%d is allocted to [%d] th block\n",prosize[i],part[j]);
               printf("Internal Fragmentation = [%d]\n",part[j]-prosize[i]);
               break;
            }
         }
      }
   }
   for(j=0;j<n;j++)
   {
      if(allocated[j]!=1)
      {
         printf("process with size %d cannot be allocated\n",prosize[j]);
      }
   }
   for(j=0;j<m;j++)
   {
      if(flag[j]==0)
      {
         External = External+part[j];
      }
   }
   printf("\nExternal Fragmentation :- ");
   printf("%d\n",External);
}

int main()
{
   int i,j,k;
   printf("No of partitions :- ");
   scanf("%d",&m);
   printf("Enter the partition sizes :- ");
   for(i=0;i<m;i++)
   {
      scanf("%d",&part[i]);
   }
   printf("Enter the no of processes :- ");
   scanf("%d",&n);
   printf("Enter the size :-\n");
   for(i=0;i<n;i++)
   {
      printf("Process %d :-",i);
      scanf("%d",&prosize[i]);
   }
   FirstFit();
   BestFit();
   WorstFit();
   return 0;
}
