#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>
#include <unistd.h>

#define N 5  // Number of philosophers

sem_t forks[N]; // Semaphores for forks

void* philosopher(void* num) {
    int id = (int)num;
    int left_fork = id;                   
    int right_fork = (id + 1) % N;         

    while (1) {
        printf("Philosopher %d is thinking\n", id);
        sleep(1);

        // Pick up forks (left, then right)
        sem_wait(&forks[left_fork]);
        sem_wait(&forks[right_fork]);

        // Eating
        printf("Philosopher %d is eating with forks %d and %d\n", id, left_fork, right_fork);
        sleep(2);

        // Put down forks
        sem_post(&forks[left_fork]);
        sem_post(&forks[right_fork]);

        printf("Philosopher %d finished eating and is thinking again\n", id);
    }
}

int main() {
    pthread_t philosophers[N];
    int phil_id[N];

    // Initialize semaphores for each fork
    for (int i = 0; i < N; i++)
        sem_init(&forks[i], 0, 1);

    // Create philosopher threads
    for (int i = 0; i < N; i++) {
        phil_id[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &phil_id[i]);
    }

    // Join philosopher threads
    for (int i = 0; i < N; i++)
        pthread_join(philosophers[i], NULL);

    return 0;
}
