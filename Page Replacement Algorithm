#include <stdio.h>
#include <stdlib.h>

int n, f, i, j, k, p, fault = 0, flag;

void printframe(int frames[], int size)
{
    int i;
    for (i = 0; i < size; i++)
    {
        printf(" |%d|", frames[i]);
    }
    printf("\n");
}

void fifo(int pages[], int n, int realframes[], int f)
{
    int frames[f];
    for (j = 0; j < f; j++)
    {
        frames[j] = -1;
    }
    printf("\nFIFO page replacement\n");
    fault = 0;
    k = 0;
    for (i = 0; i < n; i++)
    {
        p = pages[i];
        flag = 1;
        for (j = 0; j < f; j++)
        {
            if (p == frames[j])
            {
                flag = 0;
                break;
            }
        }
        if (flag == 1)
        {
            fault++;
            frames[k] = p;
            k = (k + 1) % f;
            printframe(frames, f);
        }
        else
        {
            printframe(frames, f);
        }
    }
    printf(" Total no of page faults :- %d\n", fault);
}

void lfu(int pages[], int n, int realframes[], int f)
{
    int frames[f], freq[f], order[f];
    for (j = 0; j < f; j++)
    {
        frames[j] = -1;  // Initialize empty frame
        freq[j] = 0;
        order[j] = 0;  // To track the order of insertion
    }
    printf("\nLFU page replacement\n");
    fault = 0;
    int time=0;  // Counter to track insertion order
    for (i = 0; i < n; i++)
    {
        p = pages[i];
        flag = 0;

        // Check if the page is already in a frame
        for (j = 0; j < f; j++)
        {
            if (frames[j] == p)
            {
                flag = 1;
                freq[j]++;  // Increase frequency
                order[j] = time++; // Update order (time stamp)
                break;
            }
        }

        // If the page is not in the frame, insert it
        if (flag == 0)
        {
            fault++;
            int emptySlot = -1;

            // Find an empty slot first
            for (j = 0; j < f; j++)
            {
                if (frames[j] == -1)
                {
                    emptySlot = j;
                    break;
                }
            }

            if (emptySlot != -1)
            {
                // Place the page in the empty slot
                frames[emptySlot] = p;
                freq[emptySlot] = 1;
                order[emptySlot] = time++;
            }
            else
            {
                // Find LFU page (smallest frequency)
                int minFreq = freq[0], minIndex = 0;
                for (j = 1; j < f; j++)
                {
                    if (freq[j] < minFreq)
                    {
                        minFreq = freq[j];
                        minIndex = j;
                    }
                    // If frequency is the same, replace the oldest page (FIFO tie-breaker)
                    else if (freq[j] == minFreq && order[j] < order[minIndex])
                    {
                        minIndex = j;
                    }
                }

                // Replace least frequently used (or oldest if tie)
                frames[minIndex] = p;
                freq[minIndex] = 1;
                order[minIndex] = time++;  // Update insertion time
                printf("\nPage %d inserted at index %d (LFU replacement)\n", p, minIndex);
            }
        }
        printframe(frames, f);
    }
    printf("\nTotal Page Faults: %d\n", fault);
}

void lru(int pages[], int n, int realframes[], int f)
{
    int frames[f], recent[f];
    for (j = 0; j < f; j++)
    {
        frames[j] = -1;  // Initialize empty frames
        recent[j] = -1;  // Initialize last accessed times
    }
    fault = 0;
    k = 0;
    for (i = 0; i < n; i++)
    {
        p = pages[i];
        flag = 1;
        for (j = 0; j < f; j++)
        {
            if (p == frames[j]) // page found in frame (page hit)
            {
                flag = 0;
                recent[j] = k; // Update last accessed time
                k++;
                break;
            }
        }
        if (flag == 1)
        {
            fault++;
            int min = 0;
            for (j = 1; j < f; j++)
            {
                if (recent[j] < recent[min])  // Find least recently used
                {
                    min = j;
                }
            }
            frames[min] = p;
            recent[min] = k;
            k++;
            printf("Inserted %d at index %d\n", p, min);
            printframe(frames, f);
        }
        else
        {
            printframe(frames, f);
        }
    }
    printf("Total page faults: %d\n", fault);
}

int main()
{
    int ch;
    printf("Enter the total number of pages: ");
    scanf("%d", &n);
    printf("Enter the total number of frames: ");
    scanf("%d", &f);
    int pages[n], realframes[f];
    printf("Enter the page sequence: ");
    for (i = 0; i < n; i++)
    {
        scanf("%d", &pages[i]);
    }
    for (j = 0; j < f; j++)
    {
        realframes[j] = -1;
    }
    while (1)
    {
        printf("\n\n");
        printf("1. FIFO\n");
        printf("2. LFU\n");
        printf("3. LRU\n");
        printf("4. EXIT\n");
        printf("Enter a choice: ");
        scanf("%d", &ch);
        switch (ch)
        {
        case 1:
            fifo(pages, n, realframes, f);
            break;
        case 2:
            lfu(pages, n, realframes, f);
            break;
        case 3:
            lru(pages, n, realframes, f);
            break;
        case 4:
            exit(0);
        default:
            printf("INVALID CHOICE\n");
            break;
        }
    }
    return 1;
}
